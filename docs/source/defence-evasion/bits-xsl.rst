



Создание образа на хосте
----------------------------------------------------------------------------

Злоумышленники могут создавать образ контейнера непосредственно на хосте, чтобы обойти средства защиты, отслеживающие получение вредоносных образов из публичного реестра. В API Docker может быть отправлен удаленный запрос на сборку, содержащий Dockerfile, который извлекает из публичного или локального реестра базовый ванильный образ, например alpine, а затем строит на его основе пользовательский образ[1].

Злоумышленник может воспользоваться этим API для создания на хосте пользовательского образа, содержащего вредоносное ПО, загруженное с его C2-сервера, а затем использовать Deploy Container, используя этот пользовательский образ.[2][3] Если базовый образ взят из общедоступного реестра, система защиты, скорее всего, не обнаружит его как вредоносный, поскольку это ванильный образ. Если базовый образ уже находится в локальном реестре, его извлечение можно считать еще менее подозрительным, поскольку образ уже находится в среде.



Уклонение от отладчика
----------------------------------------------------------------------------

Противники могут использовать различные средства для обнаружения и обхода отладчиков. Отладчики обычно используются защитниками для отслеживания и/или анализа выполнения потенциальных полезных нагрузок вредоносного ПО[1].

Уклонение от отладчиков может включать изменение поведения на основе результатов проверок на наличие артефактов, указывающих на отлаженную среду. Как и в случае с уклонением от виртуализации/песочницы, если противник обнаруживает отладчик, он может изменить свое вредоносное ПО, чтобы отсоединиться от жертвы или скрыть основные функции имплантата. Они также могут искать артефакты отладчика перед тем, как сбросить вторую или дополнительную полезную нагрузку.

Конкретные проверки зависят от цели и/или противника, но могут включать вызовы функций Native API, таких как IsDebuggerPresent() и NtQueryInformationProcess(), или ручную проверку флага BeingDebugged в блоке окружения процесса. Другие проверки на наличие артефактов отладки также могут быть направлены на перечисление аппаратных точек останова, опкодов сборки прерываний, проверку времени или измерение того, поднимаются ли исключения в текущем процессе.[2][3][4]

Недоброжелатели могут использовать информацию, полученную в ходе таких проверок отладчика при автоматическом обнаружении, для формирования последующего поведения. Отладчики также можно обойти, отсоединив процесс или заполнив журналы отладки бессмысленными данными с помощью сообщений, создаваемых зацикленными вызовами функций Native API, таких как OutputDebugStringW().[5][6].



Деобфускация/декодирование файлов или информации
----------------------------------------------------------------------------

Злоумышленники могут использовать обфусцированные файлы или информацию, чтобы скрыть артефакты вторжения от анализа. Им могут потребоваться отдельные механизмы для декодирования или деобфускации этой информации в зависимости от того, как они собираются ее использовать. Для этого могут использоваться встроенные функции вредоносного ПО или утилиты, присутствующие в системе.

Одним из таких примеров является использование certutil для декодирования портативного исполняемого файла инструмента удаленного доступа, который был спрятан в файле сертификата[1]. Другой пример - использование команды Windows copy /b для сборки двоичных фрагментов в вредоносную полезную нагрузку[2].

Иногда от пользователя может потребоваться открыть его для деобфускации или дешифровки в рамках пользовательского исполнения. От пользователя также может потребоваться ввести пароль для открытия защищенного паролем сжатого/зашифрованного файла, предоставленного злоумышленником. [3]



Развертывание контейнера
----------------------------------------------------------------------------

Злоумышленники могут развернуть контейнер в среде, чтобы облегчить выполнение или обойти защиту. В некоторых случаях злоумышленники могут развернуть новый контейнер для выполнения процессов, связанных с определенным образом или развертыванием, например процессов, выполняющих или загружающих вредоносное ПО. В других случаях противник может развернуть новый контейнер, сконфигурированный без сетевых правил, пользовательских ограничений и т. д., чтобы обойти существующие средства защиты в среде.

Контейнеры могут быть развернуты различными способами, например через API-интерфейсы создания и запуска Docker или через веб-приложение, такое как панель Kubernetes или Kubeflow.[1][2][3] Злоумышленники могут развернуть контейнеры на основе полученных или созданных вредоносных образов или на основе доброкачественных образов, которые загружают и выполняют вредоносную полезную нагрузку во время исполнения.[4]



Прямой доступ к томам
----------------------------------------------------------------------------

Злоумышленники могут получить прямой доступ к тому, чтобы обойти контроль доступа к файлам и мониторинг файловой системы.Windows позволяет программам иметь прямой доступ к логическим томам.Программы с прямым доступом могут читать и записывать файлы непосредственно с диска, анализируя структуры данных файловой системы. Эта техника позволяет обойти контроль доступа к файлам Windows, а также средства мониторинга файловой системы. [1]

Для выполнения этих действий в PowerShell существуют утилиты, например NinjaCopy.[2] Злоумышленники также могут использовать встроенные или сторонние утилиты для создания теневых копий или резервных копий данных с системных томов.[3]



Эксплуатация для уклонения от защиты
----------------------------------------------------------------------------

Противники могут использовать уязвимость системы или приложения для обхода средств защиты. Эксплуатация уязвимости происходит, когда противник использует ошибку в программе, службе или в самом программном обеспечении или ядре операционной системы для выполнения контролируемого противником кода.Уязвимости могут существовать в защитном программном обеспечении, которое может быть использовано для их отключения или обхода.

Противники могут заранее знать, что в среде существует защитное ПО, или же они могут провести проверку во время или вскоре после взлома системы на предмет обнаружения защитного ПО. Программное обеспечение безопасности, скорее всего, будет направлено непосредственно на эксплуатацию. Есть примеры, когда антивирусное программное обеспечение использовалось группами постоянных угроз, чтобы избежать обнаружения.

Также есть примеры уязвимостей в публичной облачной инфраструктуре SaaS-приложений, которые могут обходить границы защиты [1], обходить журналы безопасности [2] или развертывать скрытую инфраструктуру[3].



Самозванство
----------------------------------------------------------------------------

Злоумышленники могут выдавать себя за доверенное лицо или организацию, чтобы убедить и обмануть жертву, заставив ее выполнить какое-то действие от их имени. Например, злоумышленники могут общаться с жертвами, выдавая себя за известного отправителя, например руководителя, коллегу или стороннего поставщика.

Установленное доверие может быть использовано для достижения конечных целей противника, возможно, в отношении нескольких жертв.Во многих случаях взлома деловой электронной почты или кампаний по мошенничеству с использованием электронной почты злоумышленники выдают себя за других, чтобы обмануть жертв - заставить их отправить деньги или разгласить информацию, что в конечном итоге позволяет совершить финансовую кражу.

Злоумышленники также часто используют методы социальной инженерии, такие как манипулятивные и убедительные формулировки в темах сообщений электронной почты и основном тексте, например "оплата", "просьба" или "срочно", чтобы побудить жертву действовать быстро, пока вредоносная деятельность не была обнаружена. Такие кампании часто направлены именно против людей, которые в силу своих должностных обязанностей и/или доступа могут выполнить поставленную противником задачу.  

Имперсонации обычно предшествуют такие методы разведки, как сбор информации о личности жертвы и сбор информации об организациях жертвы, а также приобретение инфраструктуры, например доменов электронной почты, для подтверждения своей ложной личности[1].

В кампаниях, связанных с выдачей себя за других, существует вероятность появления нескольких жертв. Например, противник может скомпрометировать учетные записи, направленные на одну организацию, которые затем могут быть использованы для поддержки выдачи себя за другую организацию[2].



Косвенное выполнение команд
----------------------------------------------------------------------------

Злоумышленники могут использовать утилиты, позволяющие выполнять команды, чтобы обойти ограничения безопасности, ограничивающие использование интерпретаторов командной строки. Различные утилиты Windows могут использоваться для выполнения команд, возможно, без вызова cmd.

Например, Forfiles, помощник совместимости программ, компоненты подсистемы Windows для Linux, а также другие утилиты могут вызывать выполнение программ и команд из командного интерпретатора и интерпретатора сценариев, окна "Выполнить" или через сценарии. [1] [2]Злоумышленники могут использовать эти функции для уклонения от защиты, в частности для выполнения произвольных команд, обходя при этом средства обнаружения и/или контроля, которые ограничивают/препятствуют использованию cmd или расширений файлов, чаще всего связанных с вредоносными полезными нагрузками.


Изменить реестр
----------------------------------------------------------------------------

Злоумышленники могут взаимодействовать с реестром Windows, чтобы скрыть информацию о конфигурации в ключах реестра, удалить информацию в процессе очистки или в рамках других методов, помогающих сохранять и исполнять данные.

Доступ к определенным областям реестра зависит от прав учетной записи, некоторые из них требуют доступа на уровне администратора.

Для локального или удаленного изменения реестра можно использовать встроенную в Windows утилиту командной строки Reg. [1] Могут использоваться и другие инструменты, например инструмент удаленного доступа, который может содержать функциональность для взаимодействия с реестром через Windows API.Модификации реестра могут также включать действия по скрытию ключей, например добавление к именам ключей нулевого символа, что приведет к ошибке и/или будет проигнорировано при чтении через Reg или другие утилиты, использующие Win32 API. [2] Злоумышленники могут использовать эти псевдоскрытые ключи для сокрытия полезной нагрузки/команд, используемых для поддержания персистентности. [3] [4]

Реестр удаленной системы может быть изменен для облегчения выполнения файлов в рамках латерального перемещения. Для этого необходимо, чтобы служба удаленного реестра была запущена на целевой системе. [5] Часто требуются действительные учетные записи, а также доступ к SMB/Windows Admin Shares удаленной системы для RPC-коммуникаций.


Руткит
----------------------------------------------------------------------------

Злоумышленники могут использовать руткиты, чтобы скрыть присутствие программ, файлов, сетевых соединений, служб, драйверов и других компонентов системы. Руткиты - это программы, которые скрывают существование вредоносного ПО путем перехвата/перехвата и модификации вызовов API операционной системы, предоставляющих системную информацию.

[1]

Руткиты или функциональность, обеспечивающая работу руткитов, могут находиться на уровне пользователя или ядра операционной системы или ниже, включая гипервизор, главную загрузочную запись или системную прошивку. [2] Руткиты были замечены в системах Windows, Linux и Mac OS X.

[3] [4]


Инъекция шаблонов
----------------------------------------------------------------------------

Злоумышленники могут создавать или изменять ссылки в шаблонах пользовательских документов для сокрытия вредоносного кода или принудительной аутентификации. Например, спецификация Microsoft Office Open XML определяет формат документов Office на основе XML для замены старых двоичных форматов.

Файлы OOXML представляют собой ZIP-архивы, состоящие из различных XML-файлов, называемых частями, содержащими свойства, которые в совокупности определяют способ отображения документа[1].

Свойства частей могут ссылаться на общие публичные ресурсы, доступ к которым осуществляется по онлайн-адресам. Например, свойства шаблона могут ссылаться на файл, служащий предварительно отформатированным образцом документа, который извлекается при загрузке документа.

Злоумышленники могут использовать эти шаблоны для первоначального сокрытия вредоносного кода, который будет выполняться через документы пользователя. Ссылки на шаблоны, внедренные в документ, могут позволить извлекать вредоносную полезную нагрузку и выполнять ее при загрузке документа.[2] Такие документы могут быть доставлены с помощью других методов, таких как фишинг и/или испорченный общий контент, и могут ускользнуть от статического обнаружения, поскольку до момента извлечения вредоносной полезной нагрузки отсутствуют типичные индикаторы.[3] В природе известны примеры, когда внедрение шаблонов использовалось для загрузки вредоносного кода, содержащего эксплойт.[4]

Злоумышленники также могут модифицировать управляющее слово *\template в файле .rtf для аналогичного сокрытия и последующей загрузки вредоносного кода. Это легитимное значение управляющего слова предназначено для назначения файла ресурса файла шаблона, который извлекается и загружается при открытии файла .rtf. Однако злоумышленники могут изменить байты существующего .rtf-файла, чтобы вставить в поле управляющего слова шаблона URL-ресурс вредоносной полезной нагрузки[5][6].


Неиспользуемые/неподдерживаемые облачные регионы
----------------------------------------------------------------------------

Злоумышленники могут создавать облачные экземпляры в неиспользуемых географических регионах обслуживания, чтобы избежать обнаружения. Доступ обычно получают путем компрометации учетных записей, используемых для управления облачной инфраструктурой.

Поставщики облачных услуг часто предоставляют инфраструктуру по всему миру, чтобы повысить производительность, обеспечить резервирование и позволить клиентам соответствовать требованиям. Зачастую клиент использует только часть доступных регионов и может не следить за другими регионами. Если противник создаст ресурсы в неиспользуемом регионе, он сможет действовать незамеченным.

Вариация такого поведения использует различия в функциональности облачных регионов. Противник может использовать регионы, которые не поддерживают расширенные службы обнаружения, чтобы избежать обнаружения своей деятельности.

Примером использования противником неиспользуемых регионов AWS является майнинг криптовалюты с помощью Resource Hijacking, который может стоить организациям значительных сумм денег с течением времени в зависимости от используемой вычислительной мощности[1].


Обработка сценариев XSL
----------------------------------------------------------------------------

Злоумышленники могут обойти контроль над приложением и скрыть выполнение кода, внедряя сценарии в XSL-файлы. Файлы Extensible Stylesheet Language обычно используются для описания обработки и визуализации данных в XML-файлах. Для поддержки сложных операций в стандарт XSL включена поддержка встроенных сценариев на различных языках. [1]

Злоумышленники могут злоупотреблять этой функциональностью для выполнения произвольных файлов в обход контроля приложений. Подобно Trusted Developer Utilities Proxy Execution, двоичный файл Microsoft common line transformation utility [2] может быть установлен и использован для выполнения вредоносного JavaScript, встроенного в локальные или удаленные XSL-файлы. [3] Поскольку msxsl.exe не устанавливается по умолчанию, злоумышленникам, скорее всего, придется упаковывать его вместе с удаленными файлами. [4] Msxsl.exe принимает два основных аргумента: исходный файл XML и таблицу стилей XSL. Поскольку XSL-файл является действительным XML, злоумышленник может вызвать один и тот же XSL-файл дважды. При использовании msxsl.exe злоумышленники также могут присваивать файлам XML/XSL произвольное расширение[5].